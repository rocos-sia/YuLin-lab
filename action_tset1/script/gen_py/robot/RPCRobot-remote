#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from robot import RPCRobot
from robot.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  i32 power_on(bool block)')
    print('  i32 power_off(bool block)')
    print('  i32 enable(bool block)')
    print('  i32 disable(bool block)')
    print('  i32 shutdown(bool block)')
    print('  i32 stop(bool block)')
    print('  i32 pause(bool block)')
    print('  i32 resume(bool block)')
    print('  i32 run_program(string name, bool block)')
    print('  i32 set_tool_data(string name,  tool_offset,  payload,  inertia_tensor)')
    print('   get_tool_load()')
    print('   get_tcp_offset()')
    print('  i32 set_wobj(string name,  wobj)')
    print('  i32 set_wobj_offset( wobj)')
    print('   get_wobj()')
    print('   cal_fkine( joints_position,  tool,  wobj)')
    print('   cal_ikine( p,  q_near,  tool,  wobj)')
    print('  i32 set_standard_digital_out(i16 num, bool value, bool block)')
    print('  i32 set_tool_digital_out(i16 num, bool value, bool block)')
    print('  bool get_standard_digital_in(i16 num)')
    print('  bool get_tool_digital_in(i16 num)')
    print('  bool get_config_digital_in(i16 num)')
    print('  double get_standard_analog_voltage_in(i16 num)')
    print('  double get_tool_analog_voltage_in(i16 num)')
    print('  double get_standard_analog_current_in(i16 num)')
    print('   read_raw_data_485(i32 len)')
    print('   read_raw_data_485_ht( head,  tail)')
    print('   read_raw_data_485_h( head, i32 len)')
    print('  bool write_raw_data_485( data)')
    print('  bool write_raw_data_485_h( data,  head)')
    print('  bool write_raw_data_485_ht( data,  head,  tail)')
    print('   tool_read_raw_data_485(i32 len)')
    print('   tool_read_raw_data_485_h( head, i32 len)')
    print('   tool_read_raw_data_485_ht( head,  tail)')
    print('  bool tool_write_raw_data_485( data)')
    print('  bool tool_write_raw_data_485_h( data,  head)')
    print('  bool tool_write_raw_data_485_ht( data,  head,  tail)')
    print('   read_raw_data_can()')
    print('  bool write_raw_data_can(i32 id,  data)')
    print('  bool get_function_digital_in(i16 num)')
    print('  bool get_function_digital_out(i16 num)')
    print('  bool read_bool_reg(i16 num)')
    print('  i32 read_word_reg(i16 num)')
    print('  double read_float_reg(i16 num)')
    print('  i32 write_bool_reg(i16 num, bool value)')
    print('  i32 write_word_reg(i16 num, i32 value)')
    print('  i32 write_float_reg(i16 num, double value)')
    print('  i32 movej( joints_list, double v, double a, double r, bool block, Op op)')
    print('  i32 movej_pose( p, double v, double a, double r,  q_near, string tool, string wobj, bool block, Op op)')
    print('  i32 movej2( joints_list, double v, double a, double r, bool block, Op op)')
    print('  i32 movej_pose2( p, double v, double a, double r,  q_near, string tool, string wobj, bool block, Op op)')
    print('  i32 movel( p, double v, double a, double r,  q_near, string tool, string wobj, bool block, Op op)')
    print('  i32 movec( p1,  p2, double v, double a, double r, bool mode,  q_near, string tool, string wobj, bool block, Op op)')
    print('  i32 move_circle( p1,  p2, double v, double a, double r, bool mode,  q_near, string tool, string wobj, bool block, Op op)')
    print('  i32 tcp_move( pose_offset, double v, double a, double r, bool block, Op op)')
    print('  i32 tcp_move_2p( p1,  p2, double v, double a, double r, bool block, Op op)')
    print('  i32 spline( pose_list, double v, double a, string tool, string wobj, bool block, Op op)')
    print('  i32 speedj( joints_list, double a, i32 time, bool block)')
    print('  i32 speedl( pose_list, double a, i32 time, bool block)')
    print('  i32 speed_stop(bool block)')
    print('  i32 servoj( joints_list, double v, double a, double kp, double kd)')
    print('  i32 servoj_pose( pose_list, double v, double a,  q_near, string tool, string wobj, double kp, double kd)')
    print('  i32 servol( pose_list, double v, double a,  q_near, string tool, string wobj, double kp, double kd)')
    print('  i32 teach_mode(bool block)')
    print('  i32 end_teach_mode(bool block)')
    print('  i32 modbus_add_signal(string ip, i32 slave_number, i32 signal_address, i32 signal_type, string signal_name)')
    print('  i32 modbus_delete_signal(string signal_name)')
    print('  i32 modbus_read(string signal_name)')
    print('  i32 modbus_write(string signal_name, i32 value)')
    print('  void modbus_set_frequency(string signal_name, i32 frequence)')
    print('   get_last_error()')
    print('  i32 get_noneblock_taskstate(i32 id)')
    print('  void log_info(string message)')
    print('  void log_error(string message)')
    print('  i32 simulation(bool sim, bool block)')
    print('  i32 speed(double val)')
    print('   get_robot_state()')
    print('   get_flange_pose()')
    print('   get_flange_speed()')
    print('   get_flange_acceleration()')
    print('   get_tcp_pose()')
    print('   get_tcp_speed()')
    print('   get_tcp_acceleration()')
    print('   get_tcp_force()')
    print('   get_actual_joints_position()')
    print('   get_target_joints_position()')
    print('   get_actual_joints_speed()')
    print('   get_target_joints_speed()')
    print('   get_actual_joints_acceleration()')
    print('   get_target_joints_acceleration()')
    print('   get_actual_joints_torque()')
    print('   get_target_joints_torque()')
    print('  i32 stop_record_track()')
    print('  i32 start_record_track(string name)')
    print('  i32 collision_detect(i32 value)')
    print('  i32 replay(string name, i32 value)')
    print('  i32 set_load_data( value)')
    print('  i32 fc_start()')
    print('  i32 fc_stop()')
    print('  i32 fc_config( direction,  ref_ft,  damp,  max_vel,  number_list, string tool, string wobj, i32 value)')
    print('  i32 fc_move()')
    print('  i32 fc_guard_act( direction,  ref_ft, string tool, string wobj, i32 type)')
    print('  i32 fc_guard_deact()')
    print('  i32 fc_force_set_value( direction,  ref_ft)')
    print('  i32 fc_wait_pos( middle,  range, bool absolute, i32 duration, i32 timeout)')
    print('  i32 fc_wait_vel( middle,  range, bool absolute, i32 duration, i32 timeout)')
    print('  i32 fc_wait_ft( middle,  range, bool absolute, i32 duration, i32 timeout)')
    print('  i32 fc_wait_logic( value)')
    print('   fc_get_ft()')
    print('  bool fc_mode_is_active()')
    print('  i32 start_realtime_mode()')
    print('  i32 end_realtime_mode()')
    print('  i32 enable_speed_optimization(bool block)')
    print('  i32 disable_speed_optimization(bool block)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = RPCRobot.Client(protocol)
transport.open()

if cmd == 'power_on':
    if len(args) != 1:
        print('power_on requires 1 args')
        sys.exit(1)
    pp.pprint(client.power_on(eval(args[0]),))

elif cmd == 'power_off':
    if len(args) != 1:
        print('power_off requires 1 args')
        sys.exit(1)
    pp.pprint(client.power_off(eval(args[0]),))

elif cmd == 'enable':
    if len(args) != 1:
        print('enable requires 1 args')
        sys.exit(1)
    pp.pprint(client.enable(eval(args[0]),))

elif cmd == 'disable':
    if len(args) != 1:
        print('disable requires 1 args')
        sys.exit(1)
    pp.pprint(client.disable(eval(args[0]),))

elif cmd == 'shutdown':
    if len(args) != 1:
        print('shutdown requires 1 args')
        sys.exit(1)
    pp.pprint(client.shutdown(eval(args[0]),))

elif cmd == 'stop':
    if len(args) != 1:
        print('stop requires 1 args')
        sys.exit(1)
    pp.pprint(client.stop(eval(args[0]),))

elif cmd == 'pause':
    if len(args) != 1:
        print('pause requires 1 args')
        sys.exit(1)
    pp.pprint(client.pause(eval(args[0]),))

elif cmd == 'resume':
    if len(args) != 1:
        print('resume requires 1 args')
        sys.exit(1)
    pp.pprint(client.resume(eval(args[0]),))

elif cmd == 'run_program':
    if len(args) != 2:
        print('run_program requires 2 args')
        sys.exit(1)
    pp.pprint(client.run_program(args[0], eval(args[1]),))

elif cmd == 'set_tool_data':
    if len(args) != 4:
        print('set_tool_data requires 4 args')
        sys.exit(1)
    pp.pprint(client.set_tool_data(args[0], eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'get_tool_load':
    if len(args) != 0:
        print('get_tool_load requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_tool_load())

elif cmd == 'get_tcp_offset':
    if len(args) != 0:
        print('get_tcp_offset requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_tcp_offset())

elif cmd == 'set_wobj':
    if len(args) != 2:
        print('set_wobj requires 2 args')
        sys.exit(1)
    pp.pprint(client.set_wobj(args[0], eval(args[1]),))

elif cmd == 'set_wobj_offset':
    if len(args) != 1:
        print('set_wobj_offset requires 1 args')
        sys.exit(1)
    pp.pprint(client.set_wobj_offset(eval(args[0]),))

elif cmd == 'get_wobj':
    if len(args) != 0:
        print('get_wobj requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_wobj())

elif cmd == 'cal_fkine':
    if len(args) != 3:
        print('cal_fkine requires 3 args')
        sys.exit(1)
    pp.pprint(client.cal_fkine(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'cal_ikine':
    if len(args) != 4:
        print('cal_ikine requires 4 args')
        sys.exit(1)
    pp.pprint(client.cal_ikine(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'set_standard_digital_out':
    if len(args) != 3:
        print('set_standard_digital_out requires 3 args')
        sys.exit(1)
    pp.pprint(client.set_standard_digital_out(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'set_tool_digital_out':
    if len(args) != 3:
        print('set_tool_digital_out requires 3 args')
        sys.exit(1)
    pp.pprint(client.set_tool_digital_out(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'get_standard_digital_in':
    if len(args) != 1:
        print('get_standard_digital_in requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_standard_digital_in(eval(args[0]),))

elif cmd == 'get_tool_digital_in':
    if len(args) != 1:
        print('get_tool_digital_in requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_tool_digital_in(eval(args[0]),))

elif cmd == 'get_config_digital_in':
    if len(args) != 1:
        print('get_config_digital_in requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_config_digital_in(eval(args[0]),))

elif cmd == 'get_standard_analog_voltage_in':
    if len(args) != 1:
        print('get_standard_analog_voltage_in requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_standard_analog_voltage_in(eval(args[0]),))

elif cmd == 'get_tool_analog_voltage_in':
    if len(args) != 1:
        print('get_tool_analog_voltage_in requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_tool_analog_voltage_in(eval(args[0]),))

elif cmd == 'get_standard_analog_current_in':
    if len(args) != 1:
        print('get_standard_analog_current_in requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_standard_analog_current_in(eval(args[0]),))

elif cmd == 'read_raw_data_485':
    if len(args) != 1:
        print('read_raw_data_485 requires 1 args')
        sys.exit(1)
    pp.pprint(client.read_raw_data_485(eval(args[0]),))

elif cmd == 'read_raw_data_485_ht':
    if len(args) != 2:
        print('read_raw_data_485_ht requires 2 args')
        sys.exit(1)
    pp.pprint(client.read_raw_data_485_ht(eval(args[0]), eval(args[1]),))

elif cmd == 'read_raw_data_485_h':
    if len(args) != 2:
        print('read_raw_data_485_h requires 2 args')
        sys.exit(1)
    pp.pprint(client.read_raw_data_485_h(eval(args[0]), eval(args[1]),))

elif cmd == 'write_raw_data_485':
    if len(args) != 1:
        print('write_raw_data_485 requires 1 args')
        sys.exit(1)
    pp.pprint(client.write_raw_data_485(eval(args[0]),))

elif cmd == 'write_raw_data_485_h':
    if len(args) != 2:
        print('write_raw_data_485_h requires 2 args')
        sys.exit(1)
    pp.pprint(client.write_raw_data_485_h(eval(args[0]), eval(args[1]),))

elif cmd == 'write_raw_data_485_ht':
    if len(args) != 3:
        print('write_raw_data_485_ht requires 3 args')
        sys.exit(1)
    pp.pprint(client.write_raw_data_485_ht(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'tool_read_raw_data_485':
    if len(args) != 1:
        print('tool_read_raw_data_485 requires 1 args')
        sys.exit(1)
    pp.pprint(client.tool_read_raw_data_485(eval(args[0]),))

elif cmd == 'tool_read_raw_data_485_h':
    if len(args) != 2:
        print('tool_read_raw_data_485_h requires 2 args')
        sys.exit(1)
    pp.pprint(client.tool_read_raw_data_485_h(eval(args[0]), eval(args[1]),))

elif cmd == 'tool_read_raw_data_485_ht':
    if len(args) != 2:
        print('tool_read_raw_data_485_ht requires 2 args')
        sys.exit(1)
    pp.pprint(client.tool_read_raw_data_485_ht(eval(args[0]), eval(args[1]),))

elif cmd == 'tool_write_raw_data_485':
    if len(args) != 1:
        print('tool_write_raw_data_485 requires 1 args')
        sys.exit(1)
    pp.pprint(client.tool_write_raw_data_485(eval(args[0]),))

elif cmd == 'tool_write_raw_data_485_h':
    if len(args) != 2:
        print('tool_write_raw_data_485_h requires 2 args')
        sys.exit(1)
    pp.pprint(client.tool_write_raw_data_485_h(eval(args[0]), eval(args[1]),))

elif cmd == 'tool_write_raw_data_485_ht':
    if len(args) != 3:
        print('tool_write_raw_data_485_ht requires 3 args')
        sys.exit(1)
    pp.pprint(client.tool_write_raw_data_485_ht(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'read_raw_data_can':
    if len(args) != 0:
        print('read_raw_data_can requires 0 args')
        sys.exit(1)
    pp.pprint(client.read_raw_data_can())

elif cmd == 'write_raw_data_can':
    if len(args) != 2:
        print('write_raw_data_can requires 2 args')
        sys.exit(1)
    pp.pprint(client.write_raw_data_can(eval(args[0]), eval(args[1]),))

elif cmd == 'get_function_digital_in':
    if len(args) != 1:
        print('get_function_digital_in requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_function_digital_in(eval(args[0]),))

elif cmd == 'get_function_digital_out':
    if len(args) != 1:
        print('get_function_digital_out requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_function_digital_out(eval(args[0]),))

elif cmd == 'read_bool_reg':
    if len(args) != 1:
        print('read_bool_reg requires 1 args')
        sys.exit(1)
    pp.pprint(client.read_bool_reg(eval(args[0]),))

elif cmd == 'read_word_reg':
    if len(args) != 1:
        print('read_word_reg requires 1 args')
        sys.exit(1)
    pp.pprint(client.read_word_reg(eval(args[0]),))

elif cmd == 'read_float_reg':
    if len(args) != 1:
        print('read_float_reg requires 1 args')
        sys.exit(1)
    pp.pprint(client.read_float_reg(eval(args[0]),))

elif cmd == 'write_bool_reg':
    if len(args) != 2:
        print('write_bool_reg requires 2 args')
        sys.exit(1)
    pp.pprint(client.write_bool_reg(eval(args[0]), eval(args[1]),))

elif cmd == 'write_word_reg':
    if len(args) != 2:
        print('write_word_reg requires 2 args')
        sys.exit(1)
    pp.pprint(client.write_word_reg(eval(args[0]), eval(args[1]),))

elif cmd == 'write_float_reg':
    if len(args) != 2:
        print('write_float_reg requires 2 args')
        sys.exit(1)
    pp.pprint(client.write_float_reg(eval(args[0]), eval(args[1]),))

elif cmd == 'movej':
    if len(args) != 6:
        print('movej requires 6 args')
        sys.exit(1)
    pp.pprint(client.movej(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]), eval(args[5]),))

elif cmd == 'movej_pose':
    if len(args) != 9:
        print('movej_pose requires 9 args')
        sys.exit(1)
    pp.pprint(client.movej_pose(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]), args[5], args[6], eval(args[7]), eval(args[8]),))

elif cmd == 'movej2':
    if len(args) != 6:
        print('movej2 requires 6 args')
        sys.exit(1)
    pp.pprint(client.movej2(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]), eval(args[5]),))

elif cmd == 'movej_pose2':
    if len(args) != 9:
        print('movej_pose2 requires 9 args')
        sys.exit(1)
    pp.pprint(client.movej_pose2(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]), args[5], args[6], eval(args[7]), eval(args[8]),))

elif cmd == 'movel':
    if len(args) != 9:
        print('movel requires 9 args')
        sys.exit(1)
    pp.pprint(client.movel(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]), args[5], args[6], eval(args[7]), eval(args[8]),))

elif cmd == 'movec':
    if len(args) != 11:
        print('movec requires 11 args')
        sys.exit(1)
    pp.pprint(client.movec(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]), eval(args[5]), eval(args[6]), args[7], args[8], eval(args[9]), eval(args[10]),))

elif cmd == 'move_circle':
    if len(args) != 11:
        print('move_circle requires 11 args')
        sys.exit(1)
    pp.pprint(client.move_circle(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]), eval(args[5]), eval(args[6]), args[7], args[8], eval(args[9]), eval(args[10]),))

elif cmd == 'tcp_move':
    if len(args) != 6:
        print('tcp_move requires 6 args')
        sys.exit(1)
    pp.pprint(client.tcp_move(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]), eval(args[5]),))

elif cmd == 'tcp_move_2p':
    if len(args) != 7:
        print('tcp_move_2p requires 7 args')
        sys.exit(1)
    pp.pprint(client.tcp_move_2p(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]), eval(args[5]), eval(args[6]),))

elif cmd == 'spline':
    if len(args) != 7:
        print('spline requires 7 args')
        sys.exit(1)
    pp.pprint(client.spline(eval(args[0]), eval(args[1]), eval(args[2]), args[3], args[4], eval(args[5]), eval(args[6]),))

elif cmd == 'speedj':
    if len(args) != 4:
        print('speedj requires 4 args')
        sys.exit(1)
    pp.pprint(client.speedj(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'speedl':
    if len(args) != 4:
        print('speedl requires 4 args')
        sys.exit(1)
    pp.pprint(client.speedl(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'speed_stop':
    if len(args) != 1:
        print('speed_stop requires 1 args')
        sys.exit(1)
    pp.pprint(client.speed_stop(eval(args[0]),))

elif cmd == 'servoj':
    if len(args) != 5:
        print('servoj requires 5 args')
        sys.exit(1)
    pp.pprint(client.servoj(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]),))

elif cmd == 'servoj_pose':
    if len(args) != 8:
        print('servoj_pose requires 8 args')
        sys.exit(1)
    pp.pprint(client.servoj_pose(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), args[4], args[5], eval(args[6]), eval(args[7]),))

elif cmd == 'servol':
    if len(args) != 8:
        print('servol requires 8 args')
        sys.exit(1)
    pp.pprint(client.servol(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), args[4], args[5], eval(args[6]), eval(args[7]),))

elif cmd == 'teach_mode':
    if len(args) != 1:
        print('teach_mode requires 1 args')
        sys.exit(1)
    pp.pprint(client.teach_mode(eval(args[0]),))

elif cmd == 'end_teach_mode':
    if len(args) != 1:
        print('end_teach_mode requires 1 args')
        sys.exit(1)
    pp.pprint(client.end_teach_mode(eval(args[0]),))

elif cmd == 'modbus_add_signal':
    if len(args) != 5:
        print('modbus_add_signal requires 5 args')
        sys.exit(1)
    pp.pprint(client.modbus_add_signal(args[0], eval(args[1]), eval(args[2]), eval(args[3]), args[4],))

elif cmd == 'modbus_delete_signal':
    if len(args) != 1:
        print('modbus_delete_signal requires 1 args')
        sys.exit(1)
    pp.pprint(client.modbus_delete_signal(args[0],))

elif cmd == 'modbus_read':
    if len(args) != 1:
        print('modbus_read requires 1 args')
        sys.exit(1)
    pp.pprint(client.modbus_read(args[0],))

elif cmd == 'modbus_write':
    if len(args) != 2:
        print('modbus_write requires 2 args')
        sys.exit(1)
    pp.pprint(client.modbus_write(args[0], eval(args[1]),))

elif cmd == 'modbus_set_frequency':
    if len(args) != 2:
        print('modbus_set_frequency requires 2 args')
        sys.exit(1)
    pp.pprint(client.modbus_set_frequency(args[0], eval(args[1]),))

elif cmd == 'get_last_error':
    if len(args) != 0:
        print('get_last_error requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_last_error())

elif cmd == 'get_noneblock_taskstate':
    if len(args) != 1:
        print('get_noneblock_taskstate requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_noneblock_taskstate(eval(args[0]),))

elif cmd == 'log_info':
    if len(args) != 1:
        print('log_info requires 1 args')
        sys.exit(1)
    pp.pprint(client.log_info(args[0],))

elif cmd == 'log_error':
    if len(args) != 1:
        print('log_error requires 1 args')
        sys.exit(1)
    pp.pprint(client.log_error(args[0],))

elif cmd == 'simulation':
    if len(args) != 2:
        print('simulation requires 2 args')
        sys.exit(1)
    pp.pprint(client.simulation(eval(args[0]), eval(args[1]),))

elif cmd == 'speed':
    if len(args) != 1:
        print('speed requires 1 args')
        sys.exit(1)
    pp.pprint(client.speed(eval(args[0]),))

elif cmd == 'get_robot_state':
    if len(args) != 0:
        print('get_robot_state requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_robot_state())

elif cmd == 'get_flange_pose':
    if len(args) != 0:
        print('get_flange_pose requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_flange_pose())

elif cmd == 'get_flange_speed':
    if len(args) != 0:
        print('get_flange_speed requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_flange_speed())

elif cmd == 'get_flange_acceleration':
    if len(args) != 0:
        print('get_flange_acceleration requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_flange_acceleration())

elif cmd == 'get_tcp_pose':
    if len(args) != 0:
        print('get_tcp_pose requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_tcp_pose())

elif cmd == 'get_tcp_speed':
    if len(args) != 0:
        print('get_tcp_speed requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_tcp_speed())

elif cmd == 'get_tcp_acceleration':
    if len(args) != 0:
        print('get_tcp_acceleration requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_tcp_acceleration())

elif cmd == 'get_tcp_force':
    if len(args) != 0:
        print('get_tcp_force requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_tcp_force())

elif cmd == 'get_actual_joints_position':
    if len(args) != 0:
        print('get_actual_joints_position requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_actual_joints_position())

elif cmd == 'get_target_joints_position':
    if len(args) != 0:
        print('get_target_joints_position requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_target_joints_position())

elif cmd == 'get_actual_joints_speed':
    if len(args) != 0:
        print('get_actual_joints_speed requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_actual_joints_speed())

elif cmd == 'get_target_joints_speed':
    if len(args) != 0:
        print('get_target_joints_speed requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_target_joints_speed())

elif cmd == 'get_actual_joints_acceleration':
    if len(args) != 0:
        print('get_actual_joints_acceleration requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_actual_joints_acceleration())

elif cmd == 'get_target_joints_acceleration':
    if len(args) != 0:
        print('get_target_joints_acceleration requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_target_joints_acceleration())

elif cmd == 'get_actual_joints_torque':
    if len(args) != 0:
        print('get_actual_joints_torque requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_actual_joints_torque())

elif cmd == 'get_target_joints_torque':
    if len(args) != 0:
        print('get_target_joints_torque requires 0 args')
        sys.exit(1)
    pp.pprint(client.get_target_joints_torque())

elif cmd == 'stop_record_track':
    if len(args) != 0:
        print('stop_record_track requires 0 args')
        sys.exit(1)
    pp.pprint(client.stop_record_track())

elif cmd == 'start_record_track':
    if len(args) != 1:
        print('start_record_track requires 1 args')
        sys.exit(1)
    pp.pprint(client.start_record_track(args[0],))

elif cmd == 'collision_detect':
    if len(args) != 1:
        print('collision_detect requires 1 args')
        sys.exit(1)
    pp.pprint(client.collision_detect(eval(args[0]),))

elif cmd == 'replay':
    if len(args) != 2:
        print('replay requires 2 args')
        sys.exit(1)
    pp.pprint(client.replay(args[0], eval(args[1]),))

elif cmd == 'set_load_data':
    if len(args) != 1:
        print('set_load_data requires 1 args')
        sys.exit(1)
    pp.pprint(client.set_load_data(eval(args[0]),))

elif cmd == 'fc_start':
    if len(args) != 0:
        print('fc_start requires 0 args')
        sys.exit(1)
    pp.pprint(client.fc_start())

elif cmd == 'fc_stop':
    if len(args) != 0:
        print('fc_stop requires 0 args')
        sys.exit(1)
    pp.pprint(client.fc_stop())

elif cmd == 'fc_config':
    if len(args) != 8:
        print('fc_config requires 8 args')
        sys.exit(1)
    pp.pprint(client.fc_config(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]), args[5], args[6], eval(args[7]),))

elif cmd == 'fc_move':
    if len(args) != 0:
        print('fc_move requires 0 args')
        sys.exit(1)
    pp.pprint(client.fc_move())

elif cmd == 'fc_guard_act':
    if len(args) != 5:
        print('fc_guard_act requires 5 args')
        sys.exit(1)
    pp.pprint(client.fc_guard_act(eval(args[0]), eval(args[1]), args[2], args[3], eval(args[4]),))

elif cmd == 'fc_guard_deact':
    if len(args) != 0:
        print('fc_guard_deact requires 0 args')
        sys.exit(1)
    pp.pprint(client.fc_guard_deact())

elif cmd == 'fc_force_set_value':
    if len(args) != 2:
        print('fc_force_set_value requires 2 args')
        sys.exit(1)
    pp.pprint(client.fc_force_set_value(eval(args[0]), eval(args[1]),))

elif cmd == 'fc_wait_pos':
    if len(args) != 5:
        print('fc_wait_pos requires 5 args')
        sys.exit(1)
    pp.pprint(client.fc_wait_pos(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]),))

elif cmd == 'fc_wait_vel':
    if len(args) != 5:
        print('fc_wait_vel requires 5 args')
        sys.exit(1)
    pp.pprint(client.fc_wait_vel(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]),))

elif cmd == 'fc_wait_ft':
    if len(args) != 5:
        print('fc_wait_ft requires 5 args')
        sys.exit(1)
    pp.pprint(client.fc_wait_ft(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]),))

elif cmd == 'fc_wait_logic':
    if len(args) != 1:
        print('fc_wait_logic requires 1 args')
        sys.exit(1)
    pp.pprint(client.fc_wait_logic(eval(args[0]),))

elif cmd == 'fc_get_ft':
    if len(args) != 0:
        print('fc_get_ft requires 0 args')
        sys.exit(1)
    pp.pprint(client.fc_get_ft())

elif cmd == 'fc_mode_is_active':
    if len(args) != 0:
        print('fc_mode_is_active requires 0 args')
        sys.exit(1)
    pp.pprint(client.fc_mode_is_active())

elif cmd == 'start_realtime_mode':
    if len(args) != 0:
        print('start_realtime_mode requires 0 args')
        sys.exit(1)
    pp.pprint(client.start_realtime_mode())

elif cmd == 'end_realtime_mode':
    if len(args) != 0:
        print('end_realtime_mode requires 0 args')
        sys.exit(1)
    pp.pprint(client.end_realtime_mode())

elif cmd == 'enable_speed_optimization':
    if len(args) != 1:
        print('enable_speed_optimization requires 1 args')
        sys.exit(1)
    pp.pprint(client.enable_speed_optimization(eval(args[0]),))

elif cmd == 'disable_speed_optimization':
    if len(args) != 1:
        print('disable_speed_optimization requires 1 args')
        sys.exit(1)
    pp.pprint(client.disable_speed_optimization(eval(args[0]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
